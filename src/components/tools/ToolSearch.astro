---
import { getCollection } from "astro:content";
const posts = await Promise.all(
  (await getCollection("tools")).map(async (post) => ({
    title: post.data.title,
    tagline: post.data.tagline,
    slug: post.slug,
  }))
);
---
<div class="relative ">
  <button
    type="button"
    id="searchButton"
    class="w-full flex items-center gap-2 py-2 pl-2 pr-4  h-9 px-4 text-sm text-base-700 duration-300 bg-base-100 border border-transparent rounded-full appearance-none ring1 ring-base-200 placeholder-base-400 focus:border-base-300 focus:bg-transparent focus:outline-none focus:ring-base-500 focus:ring-offset-2 focus:ring-2 sm:text-sm"
    aria-label="Search for tools"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="size-4"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
    </svg>
    Search
  </button>
  <div
    id="searchModal"
    class="fixed inset-0 z-50 overflow-y-auto hidden"
    role="dialog"
    aria-modal="true"
  >
    <div class="min-h-screen px-4 text-center">
      <div
        class="fixed inset-0 bg-base-950/50 backdrop-blur transition-opacity"
        id="modalOverlay"
      >
      </div>
      <div
        class="inline-block w-full max-w-2xl px-8 mb-8 mt-12 lg:mt-48 text-left align-middle transition-all transform"
      >
        <div class="hidden">
          <button
            type="button"
            id="closeSearch"
            class="text-base-400 hover:text-base-500 cursor-pointer ml-auto"
            aria-label="Close search"
          >
            <svg
              width="15"
              height="15"
              viewBox="0 0 15 15"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
              ><path
                d="M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704ZM9.85358 5.14644C10.0488 5.3417 10.0488 5.65829 9.85358 5.85355L8.20713 7.49999L9.85358 9.14644C10.0488 9.3417 10.0488 9.65829 9.85358 9.85355C9.65832 10.0488 9.34173 10.0488 9.14647 9.85355L7.50002 8.2071L5.85358 9.85355C5.65832 10.0488 5.34173 10.0488 5.14647 9.85355C4.95121 9.65829 4.95121 9.3417 5.14647 9.14644L6.79292 7.49999L5.14647 5.85355C4.95121 5.65829 4.95121 5.3417 5.14647 5.14644C5.34173 4.95118 5.65832 4.95118 5.85358 5.14644L7.50002 6.79289L9.14647 5.14644C9.34173 4.95118 9.65832 4.95118 9.85358 5.14644Z"
                fill="currentColor"
                fill-rule="evenodd"
                clip-rule="evenodd"></path></svg
            >
          </button>
        </div>
        <input
          type="text"
          id="searchInput"
          placeholder="Search posts..."
          class="w-full py-2 pl-10 pr-4 block h-9 px-4 text-sm text-base-700 duration-300 bg-base-100 border border-transparent rounded-full appearance-none ring1 ring-base-200 placeholder-base-400 focus:border-base-300 focus:outline-none focus:ring-base-500 focus:ring-offset-2 focus:ring-2 sm:text-sm"
        />
        <div
          id="searchResults"
          class="max-h-100 rounded-xl mt-2 overflow-y-auto bg-white  overflow-hidden w-full divide-y divide-base-200 border-y border-base-200 scrollbar-hide"
        >
        </div>
      </div>
    </div>
  </div>
</div>
<script is:inline define:vars={{ posts }}>
  // Wait for the entire page to load before running the script
  window.addEventListener("load", () => {
    // Get references to various elements in the search UI
    const searchButton = document.getElementById("searchButton"); // Button that opens search modal
    const searchModal = document.getElementById("searchModal"); // Search modal container
    const modalOverlay = document.getElementById("modalOverlay"); // Overlay that closes modal on click
    const searchInput = document.getElementById("searchInput"); // Input field for searching
    const searchResults = document.getElementById("searchResults"); // Container for search results
    const closeSearch = document.getElementById("closeSearch"); // Button to close search modal
    // Initialize Fuse.js for fuzzy searching with posts data
    const fuse = new Fuse(posts, {
      keys: ["title", "tagline"], // Fields to search within
      threshold: 0.3, // Controls search sensitivity (lower = more strict)
      includeMatches: true, // Includes matching results for highlighting
    });
    // Hide search results by default
    searchResults.classList.add("hidden");
    // Function to open the search modal
    function openSearch(e) {
      e.preventDefault(); // Prevent default action (e.g., form submission)
      e.stopPropagation(); // Stop event from bubbling up the DOM
      searchModal.classList.remove("hidden"); // Show modal
      document.body.style.overflow = "hidden"; // Prevent scrolling when modal is open
      setTimeout(() => searchInput.focus(), 100); // Focus input field after a short delay
    }
    // Function to close the search modal
    function closeSearchModal(e) {
      if (e) {
        e.preventDefault();
        e.stopPropagation();
      }
      searchModal.classList.add("hidden"); // Hide modal
      document.body.style.overflow = ""; // Restore scrolling
      searchInput.value = ""; // Clear search input
      searchResults.innerHTML = ""; // Clear search results
      searchResults.classList.add("hidden"); // Ensure results remain hidden
    }
    // Function to display search results
    function renderResults(results) {
      // If input is empty, hide results
      if (!searchInput.value.trim()) {
        searchResults.innerHTML = "";
        searchResults.classList.add("hidden");
        return;
      }
      // If no results are found, display a message
      if (results.length === 0) {
        searchResults.innerHTML = `
        <div class="p-8">
            <Text tag="h3" variant="textBase" class="font-medium text-base-500 font-medium">
              There's nothing here,...
            </Text>
        </div>
        `;
        searchResults.classList.remove("hidden");
        return;
      }
      // Generate HTML for each search result
      searchResults.innerHTML = results
        .map(
          (result) => `
            <a href="/tools/tool/${result.item.slug}" class="block p-8 hover:bg-base-100 duration-300 ">
              <h3  class="font-medium text-sm text-base-900 ">
                ${result.item.title}
              </h3>
              <p  class="text-base-500 text-xs block">
                ${result.item.tagline}
              </p>
            </a>
          `
        )
        .join(""); // Join all results into a single string of HTML
      // Make the search results visible
      searchResults.classList.remove("hidden");
    }
    // Add event listeners to open the search modal
    searchButton.addEventListener("click", openSearch);
    searchButton.addEventListener("touchend", openSearch); // For mobile devices
    // Add event listeners to close the search modal
    closeSearch.addEventListener("click", closeSearchModal);
    closeSearch.addEventListener("touchend", closeSearchModal);
    // Close modal when clicking on the overlay (outside the modal)
    modalOverlay.addEventListener("click", closeSearchModal);
    modalOverlay.addEventListener("touchend", closeSearchModal);
    // Listen for user input and perform a search
    searchInput.addEventListener("input", (e) => {
      const value = e.target.value.trim(); // Get search input value
      const results = value ? fuse.search(value) : []; // Perform search only if input isn't empty
      renderResults(results); // Display search results
    });
    // Close search modal when the Escape key is pressed
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && !searchModal.classList.contains("hidden")) {
        closeSearchModal();
      }
    });
  });
</script>