---
// Import glossary data safely
let glossaryData = [];

try {
  const glossaryModule = await import("@/data/glossary.js");
  glossaryData = glossaryModule.glossaryData || [];
} catch (error) {
  console.error("Failed to load glossary data:", error);
}

// Prepare search data only if we have glossary data
const searchData = glossaryData.map((term) => ({
  term: term.term || "",
  question: term.question || "",
  answer: term.answer || "",
  slug: term.slug || "",
}));
---

<div class="relative">
  <button
    type="button"
    id="glossarySearchButton"
    class="w-full flex items-center gap-2 py-3 pl-4 pr-4 h-12 text-sm text-base-700 duration-300 bg-white border border-base-300 rounded-lg appearance-none placeholder-base-400 focus:border-accent-500 focus:outline-none focus:ring-accent-500 focus:ring-offset-2 focus:ring-2 sm:text-sm hover:border-accent-400 transition-all"
    aria-label="Search glossary terms"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="size-5 text-base-400"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
    </svg>
    <span class="text-base-500">Search glossary terms...</span>
  </button>

  <div
    id="glossarySearchModal"
    class="fixed inset-0 z-50 overflow-y-auto hidden"
    role="dialog"
    aria-modal="true"
  >
    <!-- Background overlay -->
    <div
      class="fixed inset-0 bg-base-950/50 backdrop-blur transition-opacity"
      id="glossaryModalOverlay"
    ></div>
    
    <!-- Modal content -->
    <div class="relative min-h-screen flex items-start justify-center px-4 py-12 lg:py-48">
      <div class="relative w-full max-w-2xl">
        <!-- Close button -->
        <div class="flex justify-end mb-2">
          <button
            type="button"
            id="closeGlossarySearch"
            class="text-base-600 hover:text-base-700 cursor-pointer p-2 rounded-full hover:bg-base-100"
            aria-label="Close search"
          >
            <svg
              width="15"
              height="15"
              viewBox="0 0 15 15"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M0.877075 7.49988C0.877075 3.84219 3.84222 0.877045 7.49991 0.877045C11.1576 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1576 14.1227 7.49991 14.1227C3.84222 14.1227 0.877075 11.1575 0.877075 7.49988ZM7.49991 1.82704C4.36689 1.82704 1.82708 4.36686 1.82708 7.49988C1.82708 10.6329 4.36689 13.1727 7.49991 13.1727C10.6329 13.1727 13.1727 10.6329 13.1727 7.49988C13.1727 4.36686 10.6329 1.82704 7.49991 1.82704ZM9.85358 5.14644C10.0488 5.3417 10.0488 5.65829 9.85358 5.85355L8.20713 7.49999L9.85358 9.14644C10.0488 9.3417 10.0488 9.65829 9.85358 9.85355C9.65832 10.0488 9.34173 10.0488 9.14647 9.85355L7.50002 8.2071L5.85358 9.85355C5.65832 10.0488 5.34173 10.0488 5.14647 9.85355C4.95121 9.65829 4.95121 9.3417 5.14647 9.14644L6.79292 7.49999L5.14647 5.85355C4.95121 5.65829 4.95121 5.3417 5.14647 5.14644C5.34173 4.95118 5.65832 4.95118 5.85358 5.14644L7.50002 6.79289L9.14647 5.14644C9.34173 4.95118 9.65832 4.95118 9.85358 5.14644Z"
                fill="currentColor"
                fill-rule="evenodd"
                clip-rule="evenodd"
              ></path>
            </svg>
          </button>
        </div>
        
        <!-- Search input with icon -->
        <div class="relative">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="absolute left-3 top-1/2 transform -translate-y-1/2 size-5 text-base-600"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <input
            type="text"
            id="glossarySearchInput"
            placeholder="Search SEO terms, definitions, concepts..."
            class="w-full py-4 pl-12 pr-4 text-sm text-base-700 duration-300 bg-white border border-base-200 rounded-xl appearance-none placeholder-base-400 focus:border-accent-500 focus:outline-none focus:ring-2 focus:ring-accent-500 focus:ring-offset-2 shadow-lg"
          />
        </div>
        
        <!-- Search results -->
        <div
          id="glossarySearchResults"
          class="max-h-96 rounded-xl mt-2 overflow-y-auto bg-white overflow-hidden w-full divide-y divide-base-200 border border-base-200 scrollbar-hide shadow-lg hidden"
        ></div>
      </div>
    </div>
  </div>
</div>

{searchData.length > 0 && (
  <script is:inline define:vars={{ searchData }}>
    // Wait for page load and check if Fuse is available
    window.addEventListener("load", () => {
      // Check if Fuse.js is loaded
      if (typeof Fuse === 'undefined') {
        console.warn('Fuse.js not loaded, search functionality disabled');
        return;
      }

      // Get references to elements
      const searchButton = document.getElementById("glossarySearchButton");
      const searchModal = document.getElementById("glossarySearchModal");
      const modalOverlay = document.getElementById("glossaryModalOverlay");
      const searchInput = document.getElementById("glossarySearchInput");
      const searchResults = document.getElementById("glossarySearchResults");
      const closeSearch = document.getElementById("closeGlossarySearch");

      if (!searchButton || !searchModal || !searchInput || !searchResults) {
        console.warn('Search elements not found');
        return;
      }

      // Initialize Fuse.js for fuzzy searching
      const fuse = new Fuse(searchData, {
        keys: ["term", "question", "answer"],
        threshold: 0.4,
        includeMatches: true,
      });

      // Function to open search modal
      function openSearch(e) {
        e?.preventDefault();
        e?.stopPropagation();
        searchModal.classList.remove("hidden");
        document.body.style.overflow = "hidden";
        setTimeout(() => searchInput.focus(), 100);
      }

      // Function to close search modal
      function closeSearchModal(e) {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        searchModal.classList.add("hidden");
        document.body.style.overflow = "";
        searchInput.value = "";
        searchResults.innerHTML = "";
        searchResults.classList.add("hidden");
      }

      // Function to render search results
      function renderResults(results) {
        if (!searchInput.value.trim()) {
          searchResults.innerHTML = "";
          searchResults.classList.add("hidden");
          return;
        }

        if (results.length === 0) {
          searchResults.innerHTML = `
            <div class="p-8 text-center">
              <svg class="w-12 h-12 text-base-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
              <h3 class="font-medium text-base-700 mb-2">No terms found</h3>
              <p class="text-sm text-base-500">Try a different search term or browse by letter</p>
            </div>
          `;
          searchResults.classList.remove("hidden");
          return;
        }

        searchResults.innerHTML = results
          .slice(0, 6)
          .map((result) => {
            const item = result.item;
            const truncatedAnswer = item.answer.length > 100 
              ? item.answer.substring(0, 100) + '...' 
              : item.answer;
            
            return `
              <a href="/glossary/${item.slug}" class="block p-6 hover:bg-accent-50 duration-300 border-l-4 border-transparent hover:border-accent-500">
                <div class="flex items-start justify-between">
                  <div class="flex-1">
                    <h3 class="font-semibold text-base text-base-900 mb-1">
                      ${item.term}
                    </h3>
                    <p class="text-sm text-base-600 mb-2 font-medium">
                      ${item.question}
                    </p>
                    <p class="text-xs text-base-500 leading-relaxed">
                      ${truncatedAnswer}
                    </p>
                  </div>
                  <svg class="w-4 h-4 text-accent-500 ml-4 flex-shrink-0 mt-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </div>
              </a>
            `;
          })
          .join("");

        searchResults.classList.remove("hidden");
      }

      // Event listeners
      searchButton.addEventListener("click", openSearch);
      closeSearch?.addEventListener("click", closeSearchModal);
      modalOverlay?.addEventListener("click", closeSearchModal);

      searchInput.addEventListener("input", (e) => {
        const value = e.target.value.trim();
        const results = value ? fuse.search(value) : [];
        renderResults(results);
      });

      // Keyboard shortcuts
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && !searchModal.classList.contains("hidden")) {
          closeSearchModal();
        }
      });

      searchInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          const firstResult = searchResults.querySelector("a");
          if (firstResult) {
            window.location.href = firstResult.href;
          }
        }
      });
    });
  </script>
)} 