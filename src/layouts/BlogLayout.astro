---
//  Assets
import { Image } from "astro:assets";
// Layout
import BaseLayout from "./BaseLayout.astro";
// Fundation
import Text from "@/components/fundations/elements/Text.astro";
import Link from "@/components/fundations/components/Link.astro";
import Wrapper from "@/components/fundations/containers/Wrapper.astro";
// Components
import SubscribeCta from "@/components/blog/SubscribeCta.astro";
import Insights from "@/components/blog/Insights.astro";
// Frontmatter
const { frontmatter, headings } = Astro.props;
// Retrieve all posts from the "posts" collection, which returns an unsorted array of post objects
import { getCollection } from "astro:content";
const allPostsUnsorted = await getCollection("posts");
// Sort the posts in descending order by publication date (newest to oldest)
const allPosts = allPostsUnsorted.sort(
  (a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

// Prepare SEO data
const seoTitle = `${frontmatter.title} | yxr.io Blog`;
const seoDescription = frontmatter.description || "Expert insights on Reddit marketing and viral growth strategies.";
const seoImage = frontmatter.image?.url;
const seoCanonical = `https://yxr.io/blog/posts/${frontmatter.slug || ''}`;

// Filter headings to only include h2 and h3
const tocHeadings = headings?.filter((heading: any) => heading.depth === 2 || heading.depth === 3) || [];

// Debug: log the headings to see what we're getting
console.log('All headings:', headings);
console.log('Filtered TOC headings:', tocHeadings);
---

<BaseLayout 
  title={seoTitle}
  description={seoDescription}
  image={seoImage}
  canonical={seoCanonical}
>
  <section>
    <Wrapper variant="heroNarrow">
      <Text
        tag="h1"
        variant="textXL"
        class="text-base-900 font-medium 2xl:text-5xl tracking-tight"
      >
        {frontmatter.title}
      </Text>
      <div
        class="flex gap-4 flex-col md:flex-row mt-4 items-center justify-between"
      >
        <div class="flex items-center gap-x-3">
          <Image
            width="500"
            height="500"
            src={frontmatter.avatar.url}
            alt={frontmatter.avatar.url}
            class="object-cover size-10 rounded-full"
          />
          <div class="flex flex-col text-base-500">
            <time datetime={frontmatter.pubDate.toString().slice(0, 10)}>
              <Text tag="span" variant="textXS" class="font-medium"
                >Written on {frontmatter.pubDate.toString().slice(0, 10)}
              </Text>
            </time>
            <Text tag="span" variant="textXS" class="font-medium">
              by {frontmatter.author}
            </Text>
          </div>
        </div>
        <div class="flex flex-wrap items-center gap-1">
          {
            frontmatter.tags.map((tag: string) => (
              <>
                <Link
                  title={tag}
                  size="sm"
                  variant="muted"
                  aria-label={tag}
                  href={`/blog/tags/${tag}`}
                  class="text-accent-500  font-medium text-xs hover:text-base-900     "
                >
                  {tag}
                </Link>
              </>
            ))
          }
        </div>
      </div>
      <Image
        width="500"
        height="500"
        src={frontmatter.image.url}
        alt={frontmatter.image.url}
        class="object-cover aspect-16/9 mt-8 w-full"
      />
      <div class="text-center">
        <Text
          tag="p"
          variant="textBase"
          class="mt-4 text-base-700 text-balance"
        >
          {frontmatter.description}
        </Text>
      </div>

      <!-- Table of Contents -->
      {tocHeadings.length > 0 && (
        <div class="mt-8 p-6 bg-base-50 rounded-xl border border-base-200">
          <Text tag="h2" variant="textBase" class="font-bold text-base-900 mb-4">
            Table of Contents (TLDR)
          </Text>
          <nav class="space-y-3">
            {tocHeadings.map((heading: any) => (
              <a
                href={`#${heading.slug}`}
                class={`block text-sm hover:text-accent-500 transition-colors duration-200 ${
                  heading.depth === 2 
                    ? 'text-base-700 font-semibold' 
                    : 'text-base-600 ml-6 font-medium'
                }`}
              >
                {heading.text}
              </a>
            ))}
          </nav>
        </div>
      )}
    </Wrapper>
  </section>
  <section>
    <Wrapper variant="narrow">
      <Wrapper variant="prose"><slot /></Wrapper>
    </Wrapper>
  </section>
  <SubscribeCta />
  <section>
    <Wrapper variant="standard" class="py-12">
      <div
        class="grid grid-cols-1 gap-4 md:grid-cols-2 xl:grid-cols-4 mt-8 group"
      >
        {allPosts.slice(0, 4).map((post) => <Insights post={post} />)}
      </div>
    </Wrapper>
  </section>
</BaseLayout>
